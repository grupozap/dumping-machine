apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.diffplug.gradle.spotless'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: "${spotlessVersion}"
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
    }
}

allprojects {
    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
    }

    configurations {
        all*.exclude module : 'spring-boot-starter-logging'
    }

    dependencies {
        compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: "${springBootVersion}")
        compile group: 'org.apache.kafka', name: 'kafka_2.12', version: "${kafkaVersion}"
        compile group: 'org.apache.kafka', name: 'kafka-streamers', version: "${kafkaVersion}"
        compile group: 'org.apache.parquet', name: 'parquet-avro', version: "${parquetAvroVersion}"
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: "${hadoopVersion}"
        compile group: 'io.confluent', name: 'kafka-avro-serializer', version: "${avroVersion}"
        compile group: 'com.google.code.gson', name: 'gson', version: "2.8.5"
        compile group: 'org.slf4j', name: 'slf4j-log4j12', version: "1.7.25"
        compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.470'

        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
    }

    spotless {
        java {
            target '**/*.java'
            googleJavaFormat('1.6')
        }

        format 'misc', {
            target '**/*.gradle', '**/.gitignore', 'docs/*.md', 'feeds-*/*.md', '*.md'
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration/java')
                srcDirs += file("build/generated-main-avro-java")
            }
            resources.srcDir file('src/integration/resources')
        }
    }
}
